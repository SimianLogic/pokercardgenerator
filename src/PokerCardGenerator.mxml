<?xml version="1.0" encoding="utf-8"?>
<!-- http://blog.flexexamples.com/2008/07/31/displaying-different-fonts-in-a-dropdown-menu-on-a-combobox-control-in-flex/ -->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				creationComplete="onCreationComplete()"
				layout="vertical"
				verticalAlign="top"
				backgroundColor="white"
				width="1024" height="768" 
				paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0" xmlns:local="*" xmlns:pieces="pieces.*">
	
	<mx:Script><![CDATA[
		import flashx.textLayout.formats.Direction;
		
		import mx.controls.Alert;
		import mx.controls.Text;
		import mx.core.FlexGlobals;
		import mx.events.ListEvent;
		import mx.graphics.codec.PNGEncoder;
		
		import pieces.*;
		import pieces.PokerCard;
		
		[Bindable]
		public var layouts:Array = [
			{"name":"Developer","class":LayoutDeveloper},
			{"name":"Modern", "class":LayoutModern},
			{"name":"Antique", "class":LayoutAntique},
			{"name":"Classic", "class":LayoutClassic}
		];
		
		public var defaultSymbols:Object = {
			"club":Club,
			"spade":Spade,
			"diamond":Diamond,
			"heart":Heart,
			"jacks": {
				"club":FaceBlackJack,
				"spade":FaceBlackJack,
				"diamond":FaceRedJack,
				"heart":FaceRedJack
			},
			"queens": {
				"club":FaceBlackQueen,
				"spade":FaceBlackQueen,
				"diamond":FaceRedQueen,
				"heart":FaceRedQueen
			},
			"kings": {
				"club":FaceBlackKing,
				"spade":FaceBlackKing,
				"diamond":FaceRedKing,
				"heart":FaceRedKing
			}
			
		}
			
		public var selectedSymbols:Object = {
			"club":null,
			"spade":null,
			"diamond":null,
			"heart":null,
			"jacks": {
				"club":null,
				"spade":null,
				"diamond":null,
				"heart":null
			},
			"queens": {
				"club":null,
				"spade":null,
				"diamond":null,
				"heart":null
			},
			"kings": {
				"club":null,
				"spade":null,
				"diamond":null,
				"heart":null
			}
		}

		public var saveFile:File = null;
		public var isUsingRelativePaths:Boolean = false;
		
		public var currentLayout:Class;
		
		[Bindable]
		public var currentFont:Font;
		
		public var currentWidth:int = 194;
		public var currentHeight:int = 269;
		
		public var baseWidth:int = 194;
		public var baseHeight:int = 269;
		
		public var cards:Array;
		
		public function onCreationComplete():void
		{
			//TODO: LOAD, otherwise default
			currentLayout = LayoutDeveloper; 
			layoutList.selectedIndex = 0;
				
			var all_suits:Array = [Spade, Club, Heart, Diamond];
			var labels:Array = ["A","2","3","4","5","6","7","8","9","10","J","Q","K"];
			var card_width:Number = 97;
			var card_height:Number = 135;
			cards = [];
			for(var i:int = 0; i < 4; i++)
			{
				for(var j:int = 0; j < 13; j++)
				{
					var pc:PokerCard = new PokerCard();
					pc.value = j+1;
					pc.suit = i;
					pc.layout = currentLayout; 
					
					pc.suitBitmapData = new defaultSymbols[pc.suitAsString]();
					pc.jackBitmapData = new defaultSymbols["jacks"][pc.suitAsString]();
					pc.queenBitmapData = new defaultSymbols["queens"][pc.suitAsString]();
					pc.kingBitmapData = new defaultSymbols["kings"][pc.suitAsString]();
					
					cards.push(pc);
					
					cardStrip.addChild(pc);
					
					pc.width = card_width;
					pc.height = card_height;
				}
			}
			updateUniques();
		}
		
		public function updateLayout(e:ListEvent):void
		{
			currentLayout = layouts[e.rowIndex]["class"];
			refreshLayout();
		}
		
		public function refreshLayout():void
		{
			for(var i:int = 0; i < 4; i++)
			{
				for(var j:int = 0; j < 13; j++)
				{
					cards[i*13 + j].layout = currentLayout;
				}
			}
			
			refreshFont();
			updateUniques();
		}
		
		//spits out the largest needed dimensions of each card found (jack/queen/king/suit) 
		public function updateUniques():void
		{
			if(cards == null) return;
			
			var out:String = "FILE SIZES NEEDED FOR THIS SIZE CARD:\n";
			var names:Array = [];
			var dimensions:Array = [];
			
			var width_mod:Number = currentWidth*1.0/baseWidth;
			var height_mod:Number = currentHeight*1.0/baseHeight;
			
			for(var i:int = 0; i < cards.length; i++)
			{
				var children:Array = [];
				children = children.concat(PokerCard.findChildrenByName(cards[i], "jack"));
				children = children.concat(PokerCard.findChildrenByName(cards[i], "queen"));
				children = children.concat(PokerCard.findChildrenByName(cards[i], "king"));
				children = children.concat(PokerCard.findChildrenByName(cards[i], "suit"));
				for(var j:int = 0; j < children.length; j++)
				{
					if(names.indexOf(children[j].name) == -1)
					{
						names.push(children[j].name);
						dimensions.push(Math.round(children[j].width*width_mod) + "x" + Math.round(children[j].height*height_mod));
						out += children[j].name + ": " + Math.round(children[j].width*width_mod) + "x" + Math.round(children[j].height*height_mod) + "\n";  
					}
				}
			}
			layoutInfo.text = out;
		}
		
		public function onSizeChange(event:Event):void
		{
			var new_value:int = parseInt(event.target.text);
			var aspect:Boolean = constrainProportions.selected;
			var ratio:Number = (baseWidth*1.0)/(baseHeight*1.0);
			
			trace("NEW VALUE: " + new_value + ", ASPECT: " + aspect + ", RATIO: " + ratio);
			
			if(new_value == 0) return;
			
			if(event.target == outputWidth)
			{
				currentWidth = new_value;
				if(aspect)
				{
					currentHeight = currentWidth / ratio;
					outputHeight.text = currentHeight + "";
				}
			}else{
				currentHeight = new_value;
				if(aspect)
				{
					currentWidth = currentHeight * ratio;
					outputWidth.text = currentWidth + "";
				}
			}
			updateUniques();
		}
		
		public function onFontChange(event:ListEvent):void
		{
			setFontIndex(event.rowIndex);
		}
		private function setFontIndex(index:int):void
		{
			currentFont = fonts[index];
			refreshFont();
			trace("currentFont = " + currentFont);
		}
		
		public function refreshFont():void
		{	
			if(currentFont == null) return;
			
			
			trace("REFRESH THE FONT: " + currentFont.fontName);
			
			for(var i:int = 0; i < cards.length; i++)
			{
				var children:Array = PokerCard.findChildrenByName(cards[i], "value");
				for each(var tf:TextField in children)
				{
					var format:TextFormat = tf.defaultTextFormat;
					format.font = currentFont.fontName;
					tf.setTextFormat(format);
					tf.embedFonts = false;
				}
			}
		}
		
		public var suppressRebuild:Boolean = false;
		public function rebuildCards():void
		{
			if(suppressRebuild) return;
			
			trace("REBUILD CARDS");
			refreshLayout();
			refreshFont();
			
			for(var i:int = 0; i < cards.length; i++)
			{
				cards[i].suitBitmapData = selectedSymbols[cards[i].suitAsString] || (new defaultSymbols[cards[i].suitAsString]());
			}
		}
		
		public function setDefaultSpade(event:Event):void
		{
			selectedSymbols["spade"] = null;
			spadeImage.source = null;
			spadeSymbol.text = "Default";
			rebuildCards();
		}
		public function setDefaultClub(event:Event):void
		{
			selectedSymbols["club"] = null;
			clubImage.source = null;
			clubSymbol.text = "Default";
			rebuildCards();
		}
		public function setDefaultHeart(event:Event):void
		{
			selectedSymbols["heart"] = null;
			heartImage.source = null;
			heartSymbol.text = "Default";
			rebuildCards();
		}
		public function setDefaultDiamond(event:Event):void
		{
			selectedSymbols["diamond"] = null;
			diamondImage.source = null;
			diamondSymbol.text = "Default";
			rebuildCards();
		}
		
		private static var CHOOSE_TEXTS:Object = {
			"spade":"your Spade",
			"club":"your Club",
			"heart":"your Heart",
			"diamond":"your Diamond",
			"jack":"all of your Jacks",
			"queen":"all of your Queens",
			"king":"all of your Kings",
			"jack_black":"your black Jacks",
			"jack_red":"your red Jacks",
			"queen_red":"your red Queens",
			"queen_black":"your black Queens",
			"king_red":"your red Kings",
			"king_black":"your black Kings",
			"jack_spade":"your Jack of Spades",
			"jack_club":"your Jack of Clubs",
			"jack_heart":"your Jack of Hearts",
			"jack_diamond":"your Jack of Diamonds",
			"queen_spade":"your Queen of Spades",
			"queen_club":"your Queen of Clubs",
			"queen_heart":"your Queen of Hearts",
			"queen_diamond":"your Queen of Diamonds",
			"king_spade":"your King of Spades",
			"king_club":"your King of Clubs",
			"king_heart":"your King of Hearts",
			"king_diamond":"your King of Diamonds"
		};	
		public function browseFor(key:String):void
		{
			trace("BROWSE FOR " + key);
			
			var file:File = new File(); 
			file.addEventListener(Event.SELECT, on_file); 
			var image_filter:FileFilter = new FileFilter("Image Files (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg; *.jpeg; *.gif; *.png");
			file.browseForOpen("Choose an image for " + CHOOSE_TEXTS[key] + "!", [image_filter]);
			
			function on_file(e:Event):void {
				file.removeEventListener(Event.SELECT, on_file);
				loadAsset(key, file);
			}
		}
		
		public function loadAsset(key:String, file:File):void
		{
			var base_key:String = key;
			var type_key:String = null;
			var label:Label;
			var image:Image;
			
			if(key.indexOf("_") >= 0)
			{
				var data:Array = key.split("_");
				base_key = data[0];
				type_key = data[1];
				label = FlexGlobals.topLevelApplication[base_key + "Symbol_" + type_key];
			}else{
				label = FlexGlobals.topLevelApplication[key + "Symbol"];
			}
			
			file.addEventListener(Event.COMPLETE, on_file_loaded);
			file.load();
			if(saveFile == null)
			{
				if(label == null)
				{
					trace("INVALID LABEL");
				}else{
					label.text = file.nativePath;
				}
			}else{
				//TODO: saveFile.getRelativePath(file);	
				if(label == null)
				{
					trace("INVALID LABEL");
				}else{
					label.text = saveFile.getRelativePath(file, true);
				}
			}
			
			function on_file_loaded(event:Event):void
			{
				file.removeEventListener(Event.COMPLETE, on_file_loaded);
				
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, on_loader);
				loader.loadBytes(file.data);
			}
			
			function on_loader(event:Event):void
			{
				var loaderInfo:LoaderInfo = (event.target as LoaderInfo);
				loaderInfo.removeEventListener(Event.COMPLETE, on_loader);
				
				selectedSymbols[key] = Bitmap(loaderInfo.content).bitmapData;
				
				if(key == "spade") spadeImage.source = Bitmap(loaderInfo.content);
				if(key == "club") clubImage.source = Bitmap(loaderInfo.content);
				if(key == "diamond") diamondImage.source = Bitmap(loaderInfo.content);
				if(key == "heart") heartImage.source = Bitmap(loaderInfo.content);
				
				if(["jack","queen","king"].indexOf(base_key) >= 0)
				{
					var suits_to_update:Array;
					if(type_key == null)
					{
						suits_to_update = ["spade","club","diamond","heart"];
					}else if(type_key == "black"){
						suits_to_update = ["spade","club"];
					}else if(type_key == "red"){
						suits_to_update = ["heart","diamond"];
					}else{
						suits_to_update = [type_key];
					}
					
					for(var i:int = 0; i < suits_to_update.length; i++)
					{
						FlexGlobals.topLevelApplication[base_key + "Image_" + suits_to_update[i]].source = new Bitmap(Bitmap(loaderInfo.content).bitmapData);
						
						for(var j:int = 0; j < cards.length; j++)
						{
							if(cards[j].suitAsString == suits_to_update[i])
							{
								cards[j].setFace(base_key, Bitmap(loaderInfo.content).bitmapData);
							}
						}
					}
				}
				
				if(["jack","queen","king"].indexOf(base_key) >= 0) synchSelections(base_key, type_key);
				rebuildCards();
			}
			
		}
		
		private function synchSelections(base_key:String, type_key:String):void
		{
			var i:int;
			
			var needs_empty:Array;
			var needs_update:Array; //working set
			var path:String;
			
			//set ALL cards to be the selected key
			if(type_key == null)
			{
				//nothing to empty
				needs_empty = [];
				//set all downstream labels to be the global one
				needs_update = ["red","black","spade","club","heart","diamond"];
				//string is the base symbol
				path = FlexGlobals.topLevelApplication[base_key + "Symbol"].text;
			}else if(type_key == "red"){
				//empty the base key
				needs_empty = [base_key + "Symbol"];
				//set downstream COLORED suits to be the colored one
				needs_update = ["heart","diamond"];
				//path is red dude
				path = FlexGlobals.topLevelApplication[base_key + "Symbol_red"].text;
			}else if(type_key == "black"){
				//empty the base key
				needs_empty = [base_key + "Symbol"];
				//set downstream COLORED suits to be the colored one
				needs_update = ["spade","club"];
				//path is red dude
				path = FlexGlobals.topLevelApplication[base_key + "Symbol_black"].text;
			}else{
				//empty the base key
				needs_empty = [base_key + "Symbol"];
				//if we chose a specific red card, empty the red options
				if(["heart","diamond"].indexOf(type_key) >= 0) needs_empty.push(base_key + "Symbol_red");
				//if we chose a specific black card, empty the black options
				if(["spade","club"].indexOf(type_key) >= 0) needs_empty.push(base_key + "Symbol_black");
				
				needs_update = [];
				path = "";  //doesn't matter, nothing trickles down
				
			}
			
			for(i=0; i < needs_empty.length; i++)
			{
				FlexGlobals.topLevelApplication[needs_empty[i]].text = "";	
			}
			
			for(i=0; i < needs_update.length; i++)
			{
				var label:Label = FlexGlobals.topLevelApplication[base_key + "Symbol_" + needs_update[i]];
				label.text = path;
			}
			
			//NOW... go the other way!
			reduceSelections(base_key);
		}
		
		private function reduceSelections(base_key:String):void
		{
			//if both red suits are the same, set the red setting
			if(FlexGlobals.topLevelApplication[base_key + "Symbol_heart"].text == FlexGlobals.topLevelApplication[base_key + "Symbol_diamond"].text)
			{
				FlexGlobals.topLevelApplication[base_key + "Symbol_red"].text = FlexGlobals.topLevelApplication[base_key + "Symbol_heart"].text; 
			}
			//if both black suits are the same, set the black setting
			if(FlexGlobals.topLevelApplication[base_key + "Symbol_spade"].text == FlexGlobals.topLevelApplication[base_key + "Symbol_club"].text)
			{
				FlexGlobals.topLevelApplication[base_key + "Symbol_black"].text = FlexGlobals.topLevelApplication[base_key + "Symbol_club"].text; 
			}
			//if red and black are the same, set the global
			if(FlexGlobals.topLevelApplication[base_key + "Symbol_black"].text == FlexGlobals.topLevelApplication[base_key + "Symbol_red"].text)
			{
				FlexGlobals.topLevelApplication[base_key + "Symbol"].text = FlexGlobals.topLevelApplication[base_key + "Symbol_red"].text;
			}
			
			
		}
		
		
		/***************** SAVE, SAVE AS, LOAD ********************************/
		private var potentialSave:File;
		private function handleLoad():void
		{
			potentialSave = new File();
			var docFilter:FileFilter = new FileFilter("Documents", "*.txt");
			
			potentialSave.browseForOpen("Choose Project", [docFilter]);
			potentialSave.addEventListener(Event.SELECT, onLoadSelect);
			potentialSave.addEventListener(Event.CANCEL, onLoadCancel);
		}
		private function onLoadSelect(event:Event):void
		{
			potentialSave.removeEventListener(Event.SELECT, onLoadSelect);
			potentialSave.removeEventListener(Event.CANCEL, onLoadCancel);
			
			potentialSave.addEventListener(Event.COMPLETE, onLoadComplete);
			potentialSave.load();
		}
		private function onLoadComplete(event:Event):void
		{
			potentialSave.addEventListener(Event.COMPLETE, onLoadComplete);
			saveFile = potentialSave;
			saveFileLabel.text = saveFile.nativePath;
			potentialSave = null;
			
			trace("*******************************");
			trace(event.target.data.toString());
			stringToState(event.target.data.toString());
			isUsingRelativePaths = true;
			trace("*******************************");
		}
		private function onLoadCancel(event:Event):void
		{
			potentialSave.removeEventListener(Event.SELECT, onLoadSelect);
			potentialSave.removeEventListener(Event.CANCEL, onLoadCancel);
			potentialSave = null;
		}
		
		private function handleSave():void
		{
			if(saveFile == null)
			{
				handleSaveAs();
				return;
			}
			
			var stream:FileStream = new FileStream();
			stream.open(saveFile, FileMode.WRITE);
			stream.writeUTFBytes(stateToString());
			stream.close();
		}
		
		private function handleSaveAs():void
		{
			trace(stateToString());
			
			potentialSave = new File();
			potentialSave.addEventListener(Event.CANCEL, onCancelSaveAs);
			potentialSave.addEventListener(Event.SELECT, onSelectSaveAs);	
			potentialSave.browseForSave("Save Project");
		}
		
		private function onCancelSaveAs(event:Event):void
		{
			potentialSave.removeEventListener(Event.CANCEL, onCancelSaveAs);
			potentialSave.removeEventListener(Event.SELECT, onSelectSaveAs);
			potentialSave = null;
		}
		private function onSelectSaveAs(event:Event):void
		{
			potentialSave.removeEventListener(Event.CANCEL, onCancelSaveAs);
			potentialSave.removeEventListener(Event.SELECT, onSelectSaveAs);
			potentialSave = null;
			
			saveFile = event.target as File;
			saveFileLabel.text = saveFile.nativePath;
			updatePathsToRelative();
			handleSave();
		}
		private function updatePathsToRelative():void
		{
			if(isUsingRelativePaths) return;
			
			isUsingRelativePaths = true;
			
			var labels:Array = [spadeSymbol, clubSymbol, heartSymbol, diamondSymbol,
				jackSymbol, queenSymbol, kingSymbol,
				jackSymbol_red, jackSymbol_black, queenSymbol_red, queenSymbol_black, kingSymbol_red, kingSymbol_black,
				jackSymbol_spade, jackSymbol_club, queenSymbol_spade, queenSymbol_club, kingSymbol_spade, kingSymbol_club,
				jackSymbol_heart, jackSymbol_diamond, queenSymbol_heart, queenSymbol_diamond, kingSymbol_heart, kingSymbol_diamond];
			
			var file:File;
			for each(var label:Label in labels)
			{
				if(label.text == "") continue;
				
				//see if file exists
				file = new File(label.text);
				if(file.exists)
				{
					trace("WE WERE A NATIVE PATH");
					trace("LABEL.TEXT WAS= " + label.text);
					trace("saveFile is " + saveFile);
					trace("saveFile path is " + saveFile.nativePath);
					trace("NOW SET TO " + saveFile.getRelativePath(file, true));
					label.text = saveFile.getRelativePath(file, true);
				}else{
					file = saveFile.resolvePath(label.text);
					if(file.exists)
					{
						trace("WE WERE ALREADY RELATIVE");
					}else{
						trace("UH OH, SOMETHING'S SCREWED UP");
					}
				}
				
			}
		}
		
		
		private function stringToState(state:String):void
		{
			if(saveFile == null)
			{
				throw new Error("NEED A SAVE FILE TO PROCESS RELATIVE PATHS");
			}
			
			trace("LOAD STATE FROM STRING");
			trace("SUPRESS REBUILD");
			suppressRebuild = true;
			
			var lines:Array = state.split("\n");
			for each(var line:String in lines)
			{
				if(line == "") continue;
				var data:Array = line.split("||");
				var key:String = data[0];
				var value:String = data[1];
				switch(key)
				{
					case "layout":
						for(var layout_index:int = 0; layout_index < layouts.length; layout_index++)
						{
							if(layouts[layout_index]["name"] == value)
							{
								currentLayout = layouts[layout_index]["class"];
								layoutList.selectedIndex = layout_index;
							}
						}
						break;
					case "font":
						var got_one:Boolean = false;
						for(var font_index:int=0; font_index < fonts.length; font_index++)
						{
							if(fonts[font_index].fontName == value)
							{
								got_one = true;
								setFontIndex(font_index);
							}							
						}
						
						if(got_one)
						{
							trace("SUCCESSFULLY LOADED FONT: " + value);
						}else{
							trace("COULD NOT FIND FONT: " + value);
						}
						
						break;
					case "size":
						var sizes:Array = value.split("x");
						outputWidth.text = sizes[0];
						outputHeight.text = sizes[1];
						break;
					case "constrain":
						constrainProportions.selected = (value == "true");
						break;
					case "spade":
						spadeSymbol.text = value;
						var spade:File = saveFile.resolvePath(value);
						if(spade.exists)
						{
							loadAsset(key, spade);
						}
						break;
					case "club":
						clubSymbol.text = value;
						var club:File = saveFile.resolvePath(value);
						if(club.exists)
						{
							loadAsset(key, club);
						}
						break;
					case "diamond":
						diamondSymbol.text = value;
						var diamond:File = saveFile.resolvePath(value);
						if(diamond.exists)
						{
							loadAsset(key, diamond);
						}
						break;
					case "heart":
						heartSymbol.text = value;
						var heart:File = saveFile.resolvePath(value);
						if(heart.exists)
						{
							loadAsset(key, heart);
						}
						break;
					case "jack_spade":
					case "jack_club":
					case "jack_heart":
					case "jack_diamond":
					case "queen_spade":
					case "queen_club":
					case "queen_heart":
					case "queen_diamond":
					case "king_spade":
					case "king_club":
					case "king_heart":
					case "king_diamond":
						var face_data:Array = key.split("_");
						var base_key:String = face_data[0];
						var type_key:String = face_data[1];
						
						FlexGlobals.topLevelApplication[base_key + "Symbol_" + type_key].text = value;
						var face:File = saveFile.resolvePath(value);
						if(face.exists)
						{
							loadAsset(key, face);
						}else{
							trace("UNABLE TO LOAD " + value + " FOR KEY " + key);
						}
						
						break;
					default:
						Alert.show('Unrecognized key: ' + key);
				}
			}
			
			//backfill higher order options
			reduceSelections("jack");
			reduceSelections("queen");
			reduceSelections("king");
			
			suppressRebuild = false;
			refreshLayout();
			updateUniques();
		}
		
		private function stateToString():String
		{
			var out:String = "";
			
			if(layoutList.selectedIndex >= 0) 	out += "layout||" + layouts[layoutList.selectedIndex]["name"] + "\n";
			if(fontList.selectedIndex >= 0) 	out += "font||" + fonts.getItemAt(fontList.selectedIndex).fontName + "\n";
			out += "size||" + outputWidth.text + "x" + outputHeight.text + "\n";
			out += "constrain||" + constrainProportions.selected.toString() + "\n";
			
			
			if(spadeSymbol.text != "") out += "spade||" + spadeSymbol.text + "\n";
			if(clubSymbol.text != "") out += "club||" + clubSymbol.text + "\n";
			if(diamondSymbol.text != "") out += "diamond||" + diamondSymbol.text + "\n";
			if(heartSymbol.text != "") out += "heart||" + heartSymbol.text + "\n";
			
			//for face images, only need to load the individual suits.
			//the synch function can back into the other options
			if(jackSymbol_spade.text != "") out += "jack_spade||" + jackSymbol_spade.text + "\n";
			if(jackSymbol_club.text != "") out += "jack_club||" + jackSymbol_club.text + "\n";
			if(jackSymbol_diamond.text != "") out += "jack_diamond||" + jackSymbol_diamond.text + "\n";
			if(jackSymbol_heart.text != "") out += "jack_heart||" + jackSymbol_heart.text + "\n";
			
			if(queenSymbol_spade.text != "") out += "queen_spade||" + queenSymbol_spade.text + "\n";
			if(queenSymbol_club.text != "") out += "queen_club||" + queenSymbol_club.text + "\n";
			if(queenSymbol_diamond.text != "") out += "queen_diamond||" + queenSymbol_diamond.text + "\n";
			if(queenSymbol_heart.text != "") out += "queen_heart||" + queenSymbol_heart.text + "\n";
			
			if(kingSymbol_spade.text != "") out += "king_spade||" + kingSymbol_spade.text + "\n";
			if(kingSymbol_club.text != "") out += "king_club||" + kingSymbol_club.text + "\n";
			if(kingSymbol_diamond.text != "") out += "king_diamond||" + kingSymbol_diamond.text + "\n";
			if(kingSymbol_heart.text != "") out += "king_heart||" + kingSymbol_heart.text + "\n";
			
			return out;
		}
		
		/******************* EXPORT **********************/
		private function handleExport():void
		{
			var export_folder:File = new File();
			
			export_folder.addEventListener(Event.SELECT, onSelectExport);	
			export_folder.browseForDirectory("Choose Export Directory");
		}
		
		private function onSelectExport(event:Event):void
		{
			var export_folder:File = event.target as File;
			trace("SUCCESSFULLY CHOSE FOLDER: " + export_folder.nativePath);
			
			var old_width:Number = cards[0].width;
			var old_height:Number = cards[0].height;
			
			var card:PokerCard;
			for each(card in cards)
			{
				card.width = currentWidth;
				card.height = currentHeight;
			}
			
			var png:PNGEncoder = new PNGEncoder();
			
			//defer a frame so our UIComponents can render at the proper size...
			var frame:int = 0;
			var handler:Function = function(e:Event):void{
				if(frame == 0)
				{
					for each(card in cards)
					{
						var file_name:String = card.suitAsString + "_" + card.value + ".png";
						trace("SAVE " + export_folder.nativePath + File.separator + file_name);
						
						var bitmap_data:BitmapData = new BitmapData(currentWidth, currentHeight);
						bitmap_data.draw(card, new Matrix());
						var image_data:ByteArray = png.encode(bitmap_data);

						var output:File = new File(export_folder.nativePath + File.separator + file_name);
						var stream:FileStream = new FileStream();
						
						stream.open(output, FileMode.WRITE);
						stream.writeBytes(image_data);
						stream.close();
					}					
				}else{
					removeEventListener(Event.ENTER_FRAME, handler);
					for each(card in cards)
					{
						card.width = old_width;
						card.height = old_height;
					}
				}
				frame++;
			};
			
			addEventListener(Event.ENTER_FRAME, handler);
			
		}
		
	]]></mx:Script>
	
	<mx:ArrayCollection id="fonts" source="{Font.enumerateFonts(true)}">
		<mx:sort>
			<mx:Sort>
				<mx:fields>
					<mx:SortField name="fontName" />
				</mx:fields>
			</mx:Sort>
		</mx:sort>
	</mx:ArrayCollection>
	
	<mx:ApplicationControlBar dock="true" dropShadowVisible="false">
		<mx:Button label="Load"  click="handleLoad()"/>
		<mx:Button label="Save"  click="handleSave()"/>
		<mx:Button label="Save As..."  click="handleSaveAs()"/>		
		<mx:Label id="saveFileLabel" text="(unsaved project)" width="100%" />
		<mx:Button label="Export" click="handleExport()"  />
	</mx:ApplicationControlBar>
	
	<mx:TabNavigator id="tabs" width="100%" height="495" tabHeight="30" creationPolicy="all">
		<mx:HBox label="1) Layout" >
			<mx:VBox width="50%" height="100%">
				<mx:Label text="Choose a Layout" textDecoration="underline"/>
				<mx:List id="layoutList" labelField="name" dataProvider="{layouts}" width="100%" height="50%" change="updateLayout(event)">
				</mx:List>
				
				<mx:HBox width="100%" height="50%">
					<mx:VBox width="50%" height="100%">
						<mx:Label text="Output Size" textDecoration="underline" />
						<mx:HBox>
							<mx:Label text="Width" />
							<mx:TextInput id="outputWidth" text="194" change="onSizeChange(event)"/>	
						</mx:HBox>
						<mx:HBox>
							<mx:Label text="Height" />
							<mx:TextInput id="outputHeight" text="264" change="onSizeChange(event)"/>	
						</mx:HBox>
						<mx:HBox>
							<mx:Label text="Match Layout Aspect"/>
							<mx:CheckBox id="constrainProportions" selected="true"/>	
						</mx:HBox>
						
						
					</mx:VBox>
					<mx:VBox>
						<!-- TODO: MORE OPTIONS HERE? -->
					</mx:VBox>
				</mx:HBox>
				
			</mx:VBox>
			
			<mx:TextArea id="layoutInfo" width="50%" height="100%" />
		</mx:HBox>
		<mx:HBox label="2) Font" paddingLeft="25">
			<mx:VBox horizontalAlign="right">
				<mx:List id="fontList" variableRowHeight="true" 
						 dataProvider="{fonts}"
						 labelField="fontName" 
						 fontSize="18"
						 height="400"
						 width="400"
						 allowMultipleSelection="false" 
						 change="onFontChange(event)">
					<mx:itemRenderer>
						<mx:Component>
							<mx:Label fontFamily="{data.fontName}"
									  toolTip="{data.fontName}" />
						</mx:Component>
					</mx:itemRenderer>
				</mx:List>
				<mx:HBox>
					<mx:Label text="{currentFont.fontName}" fontFamily="{currentFont.fontName}" fontSize="18"/>
					<mx:Button label="Randomize" click="setFontIndex(Math.floor(Math.random()*fonts.length));" />	
				</mx:HBox>
				
			</mx:VBox>
		</mx:HBox>
		<mx:HBox label="3) Suits" paddingTop="0" paddingLeft="10">
			<mx:VBox label="Bitmaps/PNGs" width="50%" height="100%">
				<mx:Label text="Spade" />
				<mx:HBox>
					<mx:Label id="spadeSymbol" text="" />
					<mx:Button label="Select File" click="browseFor('spade')"/>
					<mx:Button label="Use Default" click="setDefaultSpade(event)"/>
				</mx:HBox>
				<mx:Label text="Club" />
				<mx:HBox>
					<mx:Label id="clubSymbol" text="" />
					<mx:Button label="Select File" click="browseFor('club')"/>
					<mx:Button label="Use Default" click="setDefaultClub(event)"/>
				</mx:HBox>
				<mx:Label text="Diamond" />
				<mx:HBox>
					<mx:Label id="diamondSymbol" text="" />
					<mx:Button label="Select File" click="browseFor('diamond')"/>
					<mx:Button label="Use Default" click="setDefaultDiamond(event)"/>
				</mx:HBox>
				<mx:Label text="Heart" />
				<mx:HBox>
					<mx:Label id="heartSymbol" text="" />
					<mx:Button label="Select File" click="browseFor('heart')"/>
					<mx:Button label="Use Default" click="setDefaultHeart(event)"/>
				</mx:HBox>
			</mx:VBox>
			<mx:Grid>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Image id="spadeImage" width="100" height="100"/>		
					</mx:GridItem>
					<mx:GridItem>
						<mx:Image id="clubImage" width="100" height="100"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Image id="diamondImage" width="100" height="100"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:Image id="heartImage" width="100" height="100"/>
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
		</mx:HBox>
		<mx:HBox label="4) Face Cards" paddingTop="0" paddingLeft="10">		
			<mx:TabNavigator id="faceCardTabs" width="100%" height="495" tabHeight="30" creationPolicy="all">
				<!-- SINGLE FACE FILE OPTIONS -->
				<mx:VBox label="Single Face">
					<mx:Label text="Jack, Queen, King (no color differentiation)" textDecoration="underline" />
					<mx:Label text="Jack" />
					<mx:HBox>
						<mx:Label id="jackSymbol" text="" />
						<mx:Button label="Select File" click="browseFor('jack')"/>
					</mx:HBox>
					<mx:Label text="Queen" />
					<mx:HBox>
						<mx:Label id="queenSymbol" text="" />
						<mx:Button label="Select File" click="browseFor('queen')"/>
					</mx:HBox>
					<mx:Label text="King" />
					<mx:HBox>
						<mx:Label id="kingSymbol" text="" />
						<mx:Button label="Select File" click="browseFor('king')"/>
					</mx:HBox>
				</mx:VBox>
				
				<!-- COLOR FACE FILE OPTIONS -->
				<mx:VBox label="Colored Faces">
					<mx:Label text="Black Jack, Red Jack, Black Queen..." textDecoration="underline" />
					<mx:Label text="Black Jack" />
					<mx:HBox>
						<mx:Label id="jackSymbol_black" text="" />
						<mx:Button label="Select File" click="browseFor('jack_black')"/>
					</mx:HBox>
					<mx:Label text="Red Jack" />
					<mx:HBox>
						<mx:Label id="jackSymbol_red" text="" />
						<mx:Button label="Select File" click="browseFor('jack_red')"/>
					</mx:HBox>
					<mx:Label text="Black Queen" />
					<mx:HBox>
						<mx:Label id="queenSymbol_black" text="" />
						<mx:Button label="Select File" click="browseFor('queen_black')"/>
					</mx:HBox>
					<mx:Label text="Red Queen" />
					<mx:HBox>
						<mx:Label id="queenSymbol_red" text="" />
						<mx:Button label="Select File" click="browseFor('queen_red')"/>
					</mx:HBox>
					<mx:Label text="Black King" />
					<mx:HBox>
						<mx:Label id="kingSymbol_black" text="" />
						<mx:Button label="Select File" click="browseFor('king_black')"/>
					</mx:HBox>
					<mx:Label text="Red King" />
					<mx:HBox>
						<mx:Label id="kingSymbol_red" text="" />
						<mx:Button label="Select File" click="browseFor('king_red')"/>
					</mx:HBox>
				</mx:VBox>
				
				<!-- UNIQUE FACE FILE OPTIONS -->
				<mx:VBox label="Suited Faces">
					<mx:Label text="Jack of Spades, Queen of Hearts, King of Diamonds..." textDecoration="underline" />
					<mx:Label text="Jack of Spades" />
					<mx:HBox>
						<mx:Label id="jackSymbol_spade" text="" />
						<mx:Button label="Select File" click="browseFor('jack_spade')"/>
					</mx:HBox>
					<mx:Label text="Jack of Clubs" />
					<mx:HBox>
						<mx:Label id="jackSymbol_club" text="" />
						<mx:Button label="Select File" click="browseFor('jack_club')"/>
					</mx:HBox>
					<mx:Label text="Jack of Diamonds" />
					<mx:HBox>
						<mx:Label id="jackSymbol_diamond" text="" />
						<mx:Button label="Select File" click="browseFor('jack_diamond')"/>
					</mx:HBox>
					<mx:Label text="Jack of Hearts" />
					<mx:HBox>
						<mx:Label id="jackSymbol_heart" text="" />
						<mx:Button label="Select File" click="browseFor('jack_heart')"/>
					</mx:HBox>
					
					<mx:Label text="Queen of Spades" />
					<mx:HBox>
						<mx:Label id="queenSymbol_spade" text="" />
						<mx:Button label="Select File" click="browseFor('queen_spade')"/>
					</mx:HBox>
					<mx:Label text="Queen of Clubs" />
					<mx:HBox>
						<mx:Label id="queenSymbol_club" text="" />
						<mx:Button label="Select File" click="browseFor('queen_club')"/>
					</mx:HBox>
					<mx:Label text="Queen of Diamonds" />
					<mx:HBox>
						<mx:Label id="queenSymbol_diamond" text="" />
						<mx:Button label="Select File" click="browseFor('queen_diamond')"/>
					</mx:HBox>
					<mx:Label text="Queen of Hearts" />
					<mx:HBox>
						<mx:Label id="queenSymbol_heart" text="" />
						<mx:Button label="Select File" click="browseFor('queen_heart')"/>
					</mx:HBox>
					
					<mx:Label text="King of Spades" />
					<mx:HBox>
						<mx:Label id="kingSymbol_spade" text="" />
						<mx:Button label="Select File" click="browseFor('king_spade')"/>
					</mx:HBox>
					<mx:Label text="King of Clubs" />
					<mx:HBox>
						<mx:Label id="kingSymbol_club" text="" />
						<mx:Button label="Select File" click="browseFor('king_club')"/>
					</mx:HBox>
					<mx:Label text="King of Diamonds" />
					<mx:HBox>
						<mx:Label id="kingSymbol_diamond" text="" />
						<mx:Button label="Select File" click="browseFor('king_diamond')"/>
					</mx:HBox>
					<mx:Label text="King of Hearts" />
					<mx:HBox>
						<mx:Label id="kingSymbol_heart" text="" />
						<mx:Button label="Select File" click="browseFor('king_heart')"/>
					</mx:HBox>
					
				</mx:VBox>
			</mx:TabNavigator>

			<mx:Grid>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Image id="jackImage_spade" width="100" height="100"/>		
					</mx:GridItem>
					<mx:GridItem>
						<mx:Image id="jackImage_club" width="100" height="100"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:Image id="jackImage_diamond" width="100" height="100"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:Image id="jackImage_heart" width="100" height="100"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Image id="queenImage_spade" width="100" height="100"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:Image id="queenImage_club" width="100" height="100"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:Image id="queenImage_diamond" width="100" height="100"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:Image id="queenImage_heart" width="100" height="100"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Image id="kingImage_spade" width="100" height="100"/>		
					</mx:GridItem>
					<mx:GridItem>
						<mx:Image id="kingImage_club" width="100" height="100"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:Image id="kingImage_diamond" width="100" height="100"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:Image id="kingImage_heart" width="100" height="100"/>
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
		</mx:HBox>
		<!-- mx:HBox label="5) Preview" /-->
	</mx:TabNavigator>
	<mx:HBox id="cardStrip" width="1024" horizontalAlign="left" horizontalScrollPolicy="on" horizontalGap="1" />
</mx:Application>